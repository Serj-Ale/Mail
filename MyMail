import java.util.*;
import java.util.function.*;

public interface IMessage<T> {
    String getFrom();
    String getTo();
    T getContent();
}

public static class MailMessage implements IMessage<String> {
    
    private String from;
    private String to;
    private String content;

    public MailMessage(String from, String to, String content) {
        this.from = from;
        this.to = to;
        this.content = content;
    }

    public final String getFrom() {
        return from;
    }

    public final String getTo() {
        return to;
    }

    public final String getContent() {
        return content;
    }
}

public static class Salary implements IMessage<Integer> {
    
    private String from;
    private String to;
    private Integer content;

    public Salary(String from, String to, Integer content) {
        this.from = from;
        this.to = to;
        this.content = content;
    }

    public final String getFrom() {
        return from;
    }

    public final String getTo() {
        return to;
    }

    public final Integer getContent() {
        return content;
    }
}

public static class MailService<T> implements Consumer<IMessage<T>> {
    private Map<String, List<T>> mailBox;
    
    HashMap <String, List<T>> allMessage = new HashMap<>() {
        @Override
        public List<T> get (Object key) {
            return (super.get(key) == null) ? new ArrayList<>() : super.get(key);
        }
    };
       
    public MailService() {
        mailBox = allMessage;
    }

    public Map<String, List<T>> getMailBox() {
        return mailBox;
    }    

    @Override
    public void accept(IMessage<T> t) {
        if (mailBox.containsKey(t.getTo())) {
            List<T> val;
            val = mailBox.get(t.getTo());
            val.add(t.getContent());
            mailBox.put(t.getTo(), val);
        } else {
            List<T> val;
            val = new LinkedList<>();
            val.add(t.getContent());
            mailBox.put(t.getTo(), val);
        }
    }
}
